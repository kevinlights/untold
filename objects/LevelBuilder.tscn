[gd_scene load_steps=5 format=2]

[ext_resource path="res://textures/palette.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends Spatial

const OBJ_FLOOR = preload(\"res://objects/geometry/FloorCeiling.tscn\")
const OBJ_WALL = preload(\"res://objects/geometry/Wall.tscn\")
const OBJ_WATER = preload(\"res://objects/geometry/Water.tscn\")
const OBJ_PLAYER = preload(\"res://objects/Player.tscn\")
const OBJ_TORCH = preload(\"res://objects/geometry/Torch.tscn\")

const COLOUR_FLOOR = Color(\"000000\")
const COLOUR_WALL = Color(\"595652\")
const COLOUR_WATER = Color(\"306082\")
const COLOUR_WATER_TUNNEL = Color(\"5b6ee1\")
const COLOUR_PLAYER_START = Color(\"4b692f\")
const COLOUR_TORCH = Color(\"fbf236\")
const COLOUR_TREASURE = Color(\"df7126\")
const COLOUR_MONSTER = Color(\"ac3232\")
const COLOUR_BOSS = Color(\"d95763\")
const COLOUR_DOOR = Color(\"8f563b\")
const COLOUR_LOCKED_DOOR = Color(\"663931\")
const COLOUR_KEY = Color(\"eec39a\")

func place_object(type, x, y) -> void:
	var o = type.instance()
	o.translation.x = x
	o.translation.z = y
	add_child(o)

func setup_level(map : Image) -> void:
	for x in map.get_size().x:
		for y in map.get_size().y:
			var c : Color = map.get_pixel(x, y)
			match c:
				COLOUR_WALL:
					place_object(OBJ_WALL, x, y)
					place_object(OBJ_FLOOR, x, y)
				COLOUR_FLOOR:
					place_object(OBJ_FLOOR, x, y)
				COLOUR_WATER:
					place_object(OBJ_WATER, x, y)
				COLOUR_WATER_TUNNEL:
					place_object(OBJ_WALL, x, y)
					place_object(OBJ_WATER, x, y)
				COLOUR_PLAYER_START:
					place_object(OBJ_PLAYER, x, y)
					place_object(OBJ_FLOOR, x, y)
				COLOUR_TORCH:
					place_object(OBJ_TORCH, x, y)
					place_object(OBJ_FLOOR, x, y)
				COLOUR_TREASURE:
					place_object(OBJ_FLOOR, x, y)
				COLOUR_MONSTER:
					place_object(OBJ_FLOOR, x, y)

func _ready() -> void:
	var map : Image = preload(\"res://maps/test1.png\").get_data()
	map.lock()
	setup_level(map)
"

[sub_resource type="Shader" id=2]
code = "shader_type canvas_item;

void fragment() {
	vec2 uv = SCREEN_UV;
	//uv.x = floor(uv.x * 640.0) / 640.0;
	//uv.y = floor(uv.y * 360.0) / 360.0;
	vec3 screen = texture(SCREEN_TEXTURE, uv).rgb;
	float value = (screen.r + screen.g + screen.b) / 3.0f;
	vec2 palette_uv = vec2(value, 0.0f);
	COLOR = texture(TEXTURE, palette_uv);
	
}"

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 2 )

[node name="LevelBuilder" type="Spatial"]
script = SubResource( 1 )

[node name="CanvasLayer" type="CanvasLayer" parent="."]

[node name="TextureRect" type="TextureRect" parent="CanvasLayer"]
material = SubResource( 3 )
anchor_right = 1.0
anchor_bottom = 1.0
texture = ExtResource( 1 )
expand = true
__meta__ = {
"_edit_use_anchors_": false
}
